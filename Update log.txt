#2021-10-29 JavaScript: 更新了基于自带Math().random()函数的random函数，位于新类MyMath中。使用时传入两个参数(start, stop)表示范围[start, stop]。

#2021-11-04 JavaScript: 基于以前的MyMath().random()函数，改进之前的不足，支持生成范围内的随机负数，并将原MyMath().random()函数更名为randPositiveInteger()，将功能单独分出来，\
若只生成正整数,建议直接使用MyMath().randPositiveInteger()函数，能略微节省时间提高性能。

#2021-11-07
#将以前的一些本该是静态方法的方法更正为静态方法

#2022-01-20 JavaScript:
#啊！好久没更了，这次完善了List类的一些比较重要的方法，如"showItems()"(这个方法顾名思义是用来展示这个列表里所有元素的，因为对象的toString方法展示效果不佳，所以我重新写了一个方法。)\
接2021-11-04的更新，将随机数相关的方法整合在了一起，归为Random类，其中randint()方法用于生成指定范围内的整数，理论上范围可包含一个极大的数，支持范围扩展(具体步骤有时间细说)。extrac\t()
方法用于从一个列表中随机抽取指定数量的元素，不会重复。之前的randPositiveInteger()用于支持randint()可以不用，但不能删。List类中toString()方法虽然没啥用但不能删，因为有其他方法在依\
赖它。另外为了解决浮点数运算精度丢失的问题，我写了个函数floatOperation()，输入字符串形式的浮点数运算表达式即可得出精确结果。
PS：函数文档太耗时间了，有空给大家补上。^_^ ~

#2022-01-20 JavaScript:
#修复了floatOperation()函数计算整数相加返回NaN的问题。

#2022-01-21 JavaScript:
#List对象的showItems()函数新增指定展示元素的数量，当数量超过或等于列表长度将无视数量，返回整个列表，否则将只返回指定数量的元素。
#List对象新增equals()与absEquals()方法，用于判断两个List对象是否"相等"(基于简单的元素比较);\
#equals()方法为非严格模式，只要包含元素及其个数相同，就算顺序不同也会返回true。[2, 1] == [1, 2]
#absEquals()方法为严格模式，故必须所含元素及其个数相同且顺序一直才会返回true。[1, 2] == [1, 2] != [2, 1]

#2022-01-22 JavaScript:
#修复了List对象中equals()、elenmentCount()、contains()函数无法区分[2]和2的漏洞, 修复了floatOperation()函数中计算减法出现精度丢失的情况。

#2022-01-23 JavaScript:
#完善了List对象的一些功能，contains()方法可以识别Map了，且同样支持"严格"与"非严格"模式。
